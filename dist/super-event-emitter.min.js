!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.EventEmitter=t():e.EventEmitter=t()}("undefined"!=typeof self?self:this,function(){return function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";e.exports=n(1)},function(e,t,n){"use strict";function i(e,t){if("forEach"in Array.prototype)e.forEach(t);else for(var n=0;n<e.length;n+=1)t(e[n])}function r(e,t){if("filter"in Array.prototype)return e.filter(t);for(var n=[],i=0;i<e.length;i+=1){var r=e[i];t(r)&&n.push(r)}return n}function o(e,t){if(!e)throw new Error(t)}function s(e){return"string"==typeof e}function a(e){return"function"==typeof e}function u(){if(!(this instanceof u))return new u;this._listeners=[]}/**
 * @author Piotr Kowalski <piecioshka@gmail.com> (https://piecioshka.pl/)
 * @name super-event-emitter
 * @description Super small (2KB) and simple interpretation of popular event management.
 * @version 4.1.6
 * @license MIT
 * @example
 * var bar = {}; // Or any other object.
 * EventEmitter.mixin(bar);
 * bar.on('foo', function () {
 *     console.log('foo event emitted');
 * });
 * bar.emit('foo');
 */
var c=n(2),f={on:function(e,t,n){return o(s(e),"EventEmitter#on: name is not a string"),o(a(t),"EventEmitter#on: fn is not a function"),n=n||this,this._listeners.push({name:e,fn:t,ctx:n}),this},once:function(e,t,n){function i(){t.apply(n,arguments),r.off(e,i)}n=n||this;var r=this;return this.on(e,i,n),this},off:function(e,t){return this._listeners=e?r(this._listeners,function(n){return n.name!==e||!!a(t)&&n.fn!==t}):[],this},emit:function(e,t){return o(s(e),"EventEmitter#emit: name is not a string"),i(this._listeners,function(n){n.name===e&&n.fn.call(n.ctx,t),/^all|\*$/.test(n.name)&&n.fn.call(n.ctx,e,t)}),this}};f.addEventListener=f.addListener=f.bind=f.on,f.removeEventListener=f.removeListener=f.unbind=f.off,f.dispatchEventListener=f.dispatchListener=f.trigger=f.emit,u.prototype=f,u.mixin=function(e){var t=new u;for(var n in t)e[n]=t[n];return e},u.prototype.mixin=u.mixin,u.VERSION=c.version,e.exports=u},function(e,t){e.exports={name:"super-event-emitter",description:"Super small (2KB) and simple interpretation of popular event management.",version:"4.1.6",license:"MIT",author:{name:"Piotr Kowalski",email:"piecioshka@gmail.com",url:"https://piecioshka.pl/"},scripts:{build:"webpack --profile",watch:"webpack -w",test:"jasmine JASMINE_CONFIG_PATH=test/unit/jasmine.json",coverage:"istanbul cover jasmine JASMINE_CONFIG_PATH=test/unit/jasmine.json",coveralls:"npm run coverage && cat ./coverage/lcov.info | coveralls -v",version:"npm run build && git add dist/ && auto-changelog -p && git add CHANGELOG.md"},"auto-changelog":{"commit-limit":!1,template:".github/CHANGELOG_TEMPLATE.hbs"},repository:{type:"git",url:"http://github.com/piecioshka/super-event-emitter.git"},devDependencies:{"auto-changelog":"^1.4.5",coveralls:"^3.0.0",istanbul:"^0.4.4",jasmine:"^2.4.1","json-loader":"^0.5.4","string-replace-loader":"^1.0.3",webpack:"^3.10.0"},files:["dist","src","index.js","package.json","README.md"],keywords:["super","event","emitter","mixin","on","off","emit","trigger","simple"],main:"./dist/super-event-emitter.min.js"}}])});