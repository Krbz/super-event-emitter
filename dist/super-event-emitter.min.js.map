{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///super-event-emitter.min.js","webpack:///webpack/bootstrap 52c92980b0978a3f7e8f?2f68","webpack:///./index.js?2645"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","forEach","list","iterator","forEachSupported","i","length","filter","filterSupported","result","value","push","assert","cond","msg","Error","isString","arg","isFunction","EventEmitter","_listeners","Array","prototype","EventEmitterProto","on","name","fn","ctx","once","self","handle","apply","arguments","off","listener","emit","params","event","addEventListener","addListener","bind","removeEventListener","removeListener","unbind","trigger","mixin","target","emitter","key"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,aAAAD,IAEAD,EAAA,aAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD;;;;;;;;;;;AE3CvB,YAMA,SAAAe,GAAAC,EAAAC,GACA,GAAAC,EACAF,EAAAD,QAAAE,OAEA,QAAAE,GAAA,EAAuBA,EAAAH,EAAAI,OAAiBD,GAAA,EACxCF,EAAAD,EAAAG,IAKA,QAAAE,GAAAL,EAAAC,GACA,GAAAK,EACA,MAAAN,GAAAK,OAAAJ,EAGA,QADAM,MACAJ,EAAA,EAAuBA,EAAAH,EAAAI,OAAiBD,GAAA,GACxC,GAAAK,GAAAR,EAAAG,EACAF,GAAAO,IACAD,EAAAE,KAAAD,GAGA,MAAAD,GAIA,QAAAG,GAAAC,EAAAC,GACA,IAAAD,EAAA,SAAAE,OAAAD,GAAA,mBAGA,QAAAE,GAAAC,GACA,sBAAAA,GAGA,QAAAC,GAAAD,GACA,wBAAAA,GAsGA,QAAAE,KACA,MAAA7B,gBAAA6B,QAIA7B,KAAA8B,eAHA,GAAAD,GA7IA,GAAAX,GAAA,UAAAa,OAAAC,UACAlB,EAAA,WAAAiB,OAAAC,UAyCAC,GAQAC,GAAA,SAAAC,EAAAC,EAAAC,GAYA,MAXAf,GAAAI,EAAAS,GAAA,2CACAb,EAAAM,EAAAQ,GAAA,2CAGApC,KAAA8B,WAAAT,MACAc,OACAC,KAEAC,OAAArC,OAGAA,MAWAsC,KAAA,SAAAH,EAAAC,EAAAC,GACAA,KAAArC,IAEA,IAAAuC,GAAAvC,KACAwC,EAAA,WACAJ,EAAAK,MAAAJ,EAAAK,WACAH,EAAAI,IAAAR,EAAAK,GAKA,OAFAxC,MAAAkC,GAAAC,EAAAK,EAAAH,GAEArC,MAUA2C,IAAA,SAAAR,EAAAC,GAaA,MAZApC,MAAA8B,WAAAK,EAAAlB,EAAAjB,KAAA8B,WAAA,SAAAc,GACA,MAAAA,GAAAT,UACA,EAEAP,EAAAQ,GACAQ,EAAAR,QAEA,OAKApC,MAUA6C,KAAA,SAAAV,EAAAW,GAaA,MAZAxB,GAAAI,EAAAS,GAAA,6CAEAxB,EAAAX,KAAA8B,WAAA,SAAAiB,GACAA,EAAAZ,UACAY,EAAAX,GAAA7B,KAAAwC,EAAAV,IAAAS,GAGA,QAAAC,EAAAZ,MACAY,EAAAX,GAAA7B,KAAAwC,EAAAV,IAAAF,EAAAW,KAIA9C,MAKAiC,GAAAe,iBAAAf,EAAAgB,YAAAhB,EAAAiB,KAAAjB,EAAAC,GACAD,EAAAkB,oBAAAlB,EAAAmB,eAAAnB,EAAAoB,OAAApB,EAAAU,IACAV,EAAAqB,QAAArB,EAAAY,KAUAhB,EAAAG,UAAAC,EAQAJ,EAAA0B,MAAA,SAAAC,GACA,GAAAC,GAAA,GAAA5B,EAEA,QAAA6B,KAAAD,GACAD,EAAAE,GAAAD,EAAAC,EAGA,OAAAF,IAIA3B,EAAAG,UAAAuB,MAAA1B,EAAA0B,MAGA1D,EAAAD,QAAAiC","file":"super-event-emitter.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EventEmitter\"] = factory();\n\telse\n\t\troot[\"EventEmitter\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EventEmitter\"] = factory();\n\telse\n\t\troot[\"EventEmitter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @author Piotr Kowalski\n\t * @license The MIT License\n\t * @description Super small (2KB) and simple interpretation of popular event management.\n\t * @example\n\t * EventEmitter.mixin(bar);\n\t * bar.on('foo', function () {\n\t *     console.log('foo event emitted');\n\t * });\n\t * bar.emit('foo');\n\t */\n\t'use strict';\n\t\n\t// Helpers.\n\tvar filterSupported = 'filter' in Array.prototype;\n\tvar forEachSupported = 'forEach' in Array.prototype;\n\t\n\tfunction forEach(list, iterator) {\n\t    if (forEachSupported) {\n\t        list.forEach(iterator);\n\t    } else {\n\t        for (var i = 0; i < list.length; i += 1) {\n\t            iterator(list[i]);\n\t        }\n\t    }\n\t}\n\t\n\tfunction filter(list, iterator) {\n\t    if (filterSupported) {\n\t        return list.filter(iterator);\n\t    } else {\n\t        var result = [];\n\t        for (var i = 0; i < list.length; i += 1) {\n\t            var value = list[i];\n\t            if (iterator(value)) {\n\t                result.push(value);\n\t            }\n\t        }\n\t        return result;\n\t    }\n\t}\n\t\n\tfunction assert(cond, msg) {\n\t    if (!cond) throw new Error(msg || 'Assertion Error');\n\t}\n\t\n\tfunction isString(arg) {\n\t    return typeof arg === 'string';\n\t}\n\t\n\tfunction isFunction(arg) {\n\t    return typeof arg === 'function';\n\t}\n\t\n\t// Main part.\n\t\n\tvar EventEmitterProto = {\n\t    /**\n\t     * Register listener on concrete name with specified handler.\n\t     *\n\t     * @param {string} name\n\t     * @param {Function} fn\n\t     * @param {Object} [ctx]\n\t     */\n\t    on: function (name, fn, ctx) {\n\t        assert(isString(name), 'EventEmitter#on: `name` is not a string');\n\t        assert(isFunction(fn), 'EventEmitter#on: `fn` is not a function');\n\t\n\t        // Push to private lists of listeners.\n\t        this._listeners.push({\n\t            name: name,\n\t            fn: fn,\n\t            // If the context is not passed, use `this`.\n\t            ctx: ctx || this\n\t        });\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Register listener.\n\t     * Remove them after once event triggered.\n\t     *\n\t     * @param {string} name\n\t     * @param {Function} fn\n\t     * @param {Object} [ctx]\n\t     */\n\t    once: function (name, fn, ctx) {\n\t        ctx = ctx || this;\n\t\n\t        var self = this;\n\t        var handle = function () {\n\t            fn.apply(ctx, arguments);\n\t            self.off(name, handle);\n\t        };\n\t\n\t        this.on(name, handle, ctx);\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Unregister listener.\n\t     * Remove concrete listener by name and itself definition.\n\t     *\n\t     * @param {string} [name]\n\t     * @param {Function} [fn]\n\t     */\n\t    off: function (name, fn) {\n\t        this._listeners = !name ? [] : filter(this._listeners, function (listener) {\n\t            if (listener.name !== name) {\n\t                return true;\n\t            } else {\n\t                if (isFunction(fn)) {\n\t                    return listener.fn !== fn;\n\t                } else {\n\t                    return false;\n\t                }\n\t            }\n\t        });\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Trigger event.\n\t     * All of listeners waiting for emit event will be executed.\n\t     *\n\t     * @param {string} name\n\t     * @param {Object} [params]\n\t     */\n\t    emit: function (name, params) {\n\t        assert(isString(name), 'EventEmitter#emit: `name` is not a string');\n\t\n\t        forEach(this._listeners, function (event) {\n\t            if (event.name === name) {\n\t                event.fn.call(event.ctx, params);\n\t            }\n\t\n\t            if (event.name === 'all') {\n\t                event.fn.call(event.ctx, name, params);\n\t            }\n\t        });\n\t\n\t        return this;\n\t    }\n\t};\n\t\n\t// Aliases.\n\tEventEmitterProto.addEventListener = EventEmitterProto.addListener = EventEmitterProto.bind = EventEmitterProto.on;\n\tEventEmitterProto.removeEventListener = EventEmitterProto.removeListener = EventEmitterProto.unbind = EventEmitterProto.off;\n\tEventEmitterProto.trigger = EventEmitterProto.emit;\n\t\n\tfunction EventEmitter() {\n\t    if (!(this instanceof EventEmitter)) {\n\t        return new EventEmitter();\n\t    }\n\t\n\t    this._listeners = [];\n\t}\n\t\n\tEventEmitter.prototype = EventEmitterProto;\n\t\n\t/**\n\t * Mixin properties.\n\t * Best way to setup EventEmitter on any object.\n\t *\n\t * @param {Object} target\n\t */\n\tEventEmitter.mixin = function (target) {\n\t    var emitter = new EventEmitter();\n\t\n\t    for (var key in emitter) {\n\t        target[key] = emitter[key];\n\t    }\n\t\n\t    return target;\n\t};\n\t\n\t// Allow crating new mixed in objects from the instance.\n\tEventEmitter.prototype.mixin = EventEmitter.mixin;\n\t\n\t// Export `EventEmitter`.\n\tmodule.exports = EventEmitter;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** super-event-emitter.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 52c92980b0978a3f7e8f\n **/","/**\n * @author Piotr Kowalski\n * @license The MIT License\n * @description Super small (2KB) and simple interpretation of popular event management.\n * @example\n * EventEmitter.mixin(bar);\n * bar.on('foo', function () {\n *     console.log('foo event emitted');\n * });\n * bar.emit('foo');\n */\n'use strict';\n\n// Helpers.\nvar filterSupported = 'filter' in Array.prototype;\nvar forEachSupported = 'forEach' in Array.prototype;\n\nfunction forEach(list, iterator) {\n    if (forEachSupported) {\n        list.forEach(iterator);\n    } else {\n        for (var i = 0; i < list.length; i += 1) {\n            iterator(list[i]);\n        }\n    }\n}\n\nfunction filter(list, iterator) {\n    if (filterSupported) {\n        return list.filter(iterator);\n    } else {\n        var result = [];\n        for (var i = 0; i < list.length; i += 1) {\n            var value = list[i];\n            if (iterator(value)) {\n                result.push(value);\n            }\n        }\n        return result;\n    }\n}\n\nfunction assert(cond, msg) {\n    if (!cond) throw new Error(msg || 'Assertion Error');\n}\n\nfunction isString(arg) {\n    return typeof arg === 'string';\n}\n\nfunction isFunction(arg) {\n    return typeof arg === 'function';\n}\n\n// Main part.\n\nvar EventEmitterProto = {\n    /**\n     * Register listener on concrete name with specified handler.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     * @param {Object} [ctx]\n     */\n    on: function (name, fn, ctx) {\n        assert(isString(name), 'EventEmitter#on: `name` is not a string');\n        assert(isFunction(fn), 'EventEmitter#on: `fn` is not a function');\n\n        // Push to private lists of listeners.\n        this._listeners.push({\n            name: name,\n            fn: fn,\n            // If the context is not passed, use `this`.\n            ctx: ctx || this\n        });\n\n        return this;\n    },\n\n    /**\n     * Register listener.\n     * Remove them after once event triggered.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     * @param {Object} [ctx]\n     */\n    once: function (name, fn, ctx) {\n        ctx = ctx || this;\n\n        var self = this;\n        var handle = function () {\n            fn.apply(ctx, arguments);\n            self.off(name, handle);\n        };\n\n        this.on(name, handle, ctx);\n\n        return this;\n    },\n\n    /**\n     * Unregister listener.\n     * Remove concrete listener by name and itself definition.\n     *\n     * @param {string} [name]\n     * @param {Function} [fn]\n     */\n    off: function (name, fn) {\n        this._listeners = !name ? [] : filter(this._listeners, function (listener) {\n            if (listener.name !== name) {\n                return true;\n            } else {\n                if (isFunction(fn)) {\n                    return listener.fn !== fn;\n                } else {\n                    return false;\n                }\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Trigger event.\n     * All of listeners waiting for emit event will be executed.\n     *\n     * @param {string} name\n     * @param {Object} [params]\n     */\n    emit: function (name, params) {\n        assert(isString(name), 'EventEmitter#emit: `name` is not a string');\n\n        forEach(this._listeners, function (event) {\n            if (event.name === name) {\n                event.fn.call(event.ctx, params);\n            }\n\n            if (event.name === 'all') {\n                event.fn.call(event.ctx, name, params);\n            }\n        });\n\n        return this;\n    }\n};\n\n// Aliases.\nEventEmitterProto.addEventListener = EventEmitterProto.addListener = EventEmitterProto.bind = EventEmitterProto.on;\nEventEmitterProto.removeEventListener = EventEmitterProto.removeListener = EventEmitterProto.unbind = EventEmitterProto.off;\nEventEmitterProto.trigger = EventEmitterProto.emit;\n\nfunction EventEmitter() {\n    if (!(this instanceof EventEmitter)) {\n        return new EventEmitter();\n    }\n\n    this._listeners = [];\n}\n\nEventEmitter.prototype = EventEmitterProto;\n\n/**\n * Mixin properties.\n * Best way to setup EventEmitter on any object.\n *\n * @param {Object} target\n */\nEventEmitter.mixin = function (target) {\n    var emitter = new EventEmitter();\n\n    for (var key in emitter) {\n        target[key] = emitter[key];\n    }\n\n    return target;\n};\n\n// Allow crating new mixed in objects from the instance.\nEventEmitter.prototype.mixin = EventEmitter.mixin;\n\n// Export `EventEmitter`.\nmodule.exports = EventEmitter;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0 1\n **/"],"sourceRoot":""}