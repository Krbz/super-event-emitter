{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///super-event-emitter.min.js","webpack:///webpack/bootstrap 99933f2452ad500ccfb6?2012","webpack:///./index.js?2645"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","toString","arg","Object","prototype","assert","cond","msg","Error","forEach","list","iterator","context","Array","bind","isString","isFunction","isArray","EventEmitter","on","name","fn","ctx","_listeners","push","once","self","handle","apply","arguments","off","listener","index","splice","emit","params","event","mixin","target","key","hasOwnProperty","addEventListener","addListener","removeEventListener","removeListener","unbind","trigger"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,aAAAD,IAEAD,EAAA,aAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD;;;;;;;;;;AE5CvB,YAIA,SAAAe,GAAAC,GACA,MAAAC,QAAAC,UAAAH,SAAAJ,KAAAK,GAGA,QAAAG,GAAAC,EAAAC,GACA,IAAAD,EAAA,SAAAE,OAAAD,GAAA,mBAGA,QAAAE,GAAAC,EAAAC,EAAAC,GACAA,QACAF,QACAG,MAAAT,UAAAK,QAAAZ,KAAAa,EAAAC,EAAAG,KAAAF,IAGA,QAAAG,GAAAb,GACA,sBAAAA,GAGA,QAAAc,GAAAd,GACA,wBAAAA,GAGA,QAAAe,GAAAf,GACA,yBAAAD,EAAAC,GASA,GAAAgB,IAQAC,GAAA,SAAAC,EAAAC,EAAAC,GACAjB,EAAAU,EAAAK,GAAA,2CACAf,EAAAW,EAAAK,GAAA,2CAEAJ,EAAA3B,KAAAiC,cACAjC,KAAAiC,eAIAjC,KAAAiC,WAAAC,MACAJ,OACAC,KAEAC,OAAAhC,QAYAmC,KAAA,SAAAL,EAAAC,EAAAC,GACAA,KAAAhC,IAEA,IAAAoC,GAAApC,KACAqC,EAAA,WACAN,EAAAO,MAAAN,EAAAO,WACAH,EAAAI,IAAAV,EAAAO,GAGArC,MAAA6B,GAAAC,EAAAO,EAAAL,IAUAQ,IAAA,SAAAV,EAAAC,GACAJ,EAAA3B,KAAAiC,cACAjC,KAAAiC,eAGAd,EAAAnB,KAAAiC,WAAA,SAAAQ,EAAAC,GACAZ,EACAW,EAAAX,WACAJ,EAAAK,GACAU,EAAAV,QACA/B,KAAAiC,WAAAU,OAAAD,EAAA,GAGA1C,KAAAiC,WAAAU,OAAAD,EAAA,IAIA1C,KAAAiC,WAAAU,OAAAD,EAAA,IAES1C,OAUT4C,KAAA,SAAAd,EAAAe,GACA9B,EAAAU,EAAAK,GAAA,6CAEAH,EAAA3B,KAAAiC,cACAjC,KAAAiC,eAGAd,EAAAnB,KAAAiC,WAAA,SAAAa,GACAA,EAAAhB,UACAgB,EAAAf,GAAAxB,KAAAuC,EAAAd,IAAAa,GAGA,QAAAC,EAAAhB,MACAgB,EAAAf,GAAAxB,KAAAuC,EAAAd,IAAAF,EAAAe,MAWAE,MAAA,SAAAC,GACA,OAAAC,KAAAjD,MACAA,KAAAkD,eAAAD,KACAD,EAAAC,GAAAjD,KAAAiD,GAIA,OAAAD,IAOApB,GAAAuB,iBAAAvB,EAAAwB,YAAAxB,EAAAJ,KAAAI,EAAAC,GACAD,EAAAyB,oBAAAzB,EAAA0B,eAAA1B,EAAA2B,OAAA3B,EAAAY,IACAZ,EAAA4B,QAAA5B,EAAAgB,KAIA/C,EAAAD,QAAAgC","file":"super-event-emitter.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EventEmitter\"] = factory();\n\telse\n\t\troot[\"EventEmitter\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EventEmitter\"] = factory();\n\telse\n\t\troot[\"EventEmitter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @author Piotr Kowalski\n\t * @license The MIT License\n\t * @example\n\t * EventEmitter.mixin(bar);\n\t * bar.on('foo', function () {\n\t *     console.log('foo event emitted');\n\t * });\n\t * bar.emit('foo');\n\t */\n\t'use strict';\n\t\n\t// Helpers.\n\t\n\tfunction toString(arg) {\n\t    return Object.prototype.toString.call(arg);\n\t}\n\t\n\tfunction assert(cond, msg) {\n\t    if (!cond) throw new Error(msg || 'Assertion Error');\n\t}\n\t\n\tfunction forEach(list, iterator, context) {\n\t    context = context || {};\n\t    list = list || [];\n\t    Array.prototype.forEach.call(list, iterator.bind(context));\n\t}\n\t\n\tfunction isString(arg) {\n\t    return typeof arg === 'string';\n\t}\n\t\n\tfunction isFunction(arg) {\n\t    return typeof arg === 'function';\n\t}\n\t\n\tfunction isArray(arg) {\n\t    return toString(arg) === '[object Array]';\n\t}\n\t\n\t// Main part.\n\t\n\t/**\n\t * @typedef {Object} EventEmitter\n\t * @description Super small and simple interpretation of popular event management.\n\t */\n\tvar EventEmitter = {\n\t    /**\n\t     * Register listener on concrete name with specified handler.\n\t     *\n\t     * @param {string} name\n\t     * @param {Function} fn\n\t     * @param {Object} [ctx]\n\t     */\n\t    on: function (name, fn, ctx) {\n\t        assert(isString(name), 'EventEmitter#on: `name` is not a string');\n\t        assert(isFunction(fn), 'EventEmitter#on: `fn` is not a function');\n\t\n\t        if (!isArray(this._listeners)) {\n\t            this._listeners = [];\n\t        }\n\t\n\t        // Push to private lists of listeners.\n\t        this._listeners.push({\n\t            name: name,\n\t            fn: fn,\n\t            // If the context is not passed, use `this`.\n\t            ctx: ctx || this\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Register listener.\n\t     * Remove them after once event triggered.\n\t     *\n\t     * @param {string} name\n\t     * @param {Function} fn\n\t     * @param {Object} [ctx]\n\t     */\n\t    once: function (name, fn, ctx) {\n\t        ctx = ctx || this;\n\t\n\t        var self = this;\n\t        var handle = function () {\n\t            fn.apply(ctx, arguments);\n\t            self.off(name, handle);\n\t        };\n\t\n\t        this.on(name, handle, ctx);\n\t    },\n\t\n\t    /**\n\t     * Unregister listener.\n\t     * Remove concrete listener by name and itself definition.\n\t     *\n\t     * @param {string} [name]\n\t     * @param {Function} [fn]\n\t     */\n\t    off: function (name, fn) {\n\t        if (!isArray(this._listeners)) {\n\t            this._listeners = [];\n\t        }\n\t\n\t        forEach(this._listeners, function (listener, index) {\n\t            if (name) {\n\t                if (listener.name === name) {\n\t                    if (isFunction(fn)) {\n\t                        if (listener.fn === fn) {\n\t                            this._listeners.splice(index, 1);\n\t                        }\n\t                    } else {\n\t                        this._listeners.splice(index, 1);\n\t                    }\n\t                }\n\t            } else {\n\t                this._listeners.splice(index, 1);\n\t            }\n\t        }, this);\n\t    },\n\t\n\t    /**\n\t     * Trigger event.\n\t     * All of listeners waiting for emit event will be executed.\n\t     *\n\t     * @param {string} name\n\t     * @param {Object} [params]\n\t     */\n\t    emit: function (name, params) {\n\t        assert(isString(name), 'EventEmitter#emit: `name` is not a string');\n\t\n\t        if (!isArray(this._listeners)) {\n\t            this._listeners = [];\n\t        }\n\t\n\t        forEach(this._listeners, function (event) {\n\t            if (event.name === name) {\n\t                event.fn.call(event.ctx, params);\n\t            }\n\t\n\t            if (event.name === 'all') {\n\t                event.fn.call(event.ctx, name, params);\n\t            }\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Mixin properties.\n\t     * Best way to setup EventEmitter on any object.\n\t     *\n\t     * @param {Object} target\n\t     */\n\t    mixin: function (target) {\n\t        for (var key in this) {\n\t            if (this.hasOwnProperty(key)) {\n\t                target[key] = this[key];\n\t            }\n\t        }\n\t\n\t        return target;\n\t    }\n\t};\n\t\n\t\n\t// Aliases.\n\t\n\tEventEmitter.addEventListener = EventEmitter.addListener = EventEmitter.bind = EventEmitter.on;\n\tEventEmitter.removeEventListener = EventEmitter.removeListener = EventEmitter.unbind = EventEmitter.off;\n\tEventEmitter.trigger = EventEmitter.emit;\n\t\n\t\n\t// Export `EventEmitter`.\n\tmodule.exports = EventEmitter;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** super-event-emitter.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 99933f2452ad500ccfb6\n **/","/**\n * @author Piotr Kowalski\n * @license The MIT License\n * @example\n * EventEmitter.mixin(bar);\n * bar.on('foo', function () {\n *     console.log('foo event emitted');\n * });\n * bar.emit('foo');\n */\n'use strict';\n\n// Helpers.\n\nfunction toString(arg) {\n    return Object.prototype.toString.call(arg);\n}\n\nfunction assert(cond, msg) {\n    if (!cond) throw new Error(msg || 'Assertion Error');\n}\n\nfunction forEach(list, iterator, context) {\n    context = context || {};\n    list = list || [];\n    Array.prototype.forEach.call(list, iterator.bind(context));\n}\n\nfunction isString(arg) {\n    return typeof arg === 'string';\n}\n\nfunction isFunction(arg) {\n    return typeof arg === 'function';\n}\n\nfunction isArray(arg) {\n    return toString(arg) === '[object Array]';\n}\n\n// Main part.\n\n/**\n * @typedef {Object} EventEmitter\n * @description Super small and simple interpretation of popular event management.\n */\nvar EventEmitter = {\n    /**\n     * Register listener on concrete name with specified handler.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     * @param {Object} [ctx]\n     */\n    on: function (name, fn, ctx) {\n        assert(isString(name), 'EventEmitter#on: `name` is not a string');\n        assert(isFunction(fn), 'EventEmitter#on: `fn` is not a function');\n\n        if (!isArray(this._listeners)) {\n            this._listeners = [];\n        }\n\n        // Push to private lists of listeners.\n        this._listeners.push({\n            name: name,\n            fn: fn,\n            // If the context is not passed, use `this`.\n            ctx: ctx || this\n        });\n    },\n\n    /**\n     * Register listener.\n     * Remove them after once event triggered.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     * @param {Object} [ctx]\n     */\n    once: function (name, fn, ctx) {\n        ctx = ctx || this;\n\n        var self = this;\n        var handle = function () {\n            fn.apply(ctx, arguments);\n            self.off(name, handle);\n        };\n\n        this.on(name, handle, ctx);\n    },\n\n    /**\n     * Unregister listener.\n     * Remove concrete listener by name and itself definition.\n     *\n     * @param {string} [name]\n     * @param {Function} [fn]\n     */\n    off: function (name, fn) {\n        if (!isArray(this._listeners)) {\n            this._listeners = [];\n        }\n\n        forEach(this._listeners, function (listener, index) {\n            if (name) {\n                if (listener.name === name) {\n                    if (isFunction(fn)) {\n                        if (listener.fn === fn) {\n                            this._listeners.splice(index, 1);\n                        }\n                    } else {\n                        this._listeners.splice(index, 1);\n                    }\n                }\n            } else {\n                this._listeners.splice(index, 1);\n            }\n        }, this);\n    },\n\n    /**\n     * Trigger event.\n     * All of listeners waiting for emit event will be executed.\n     *\n     * @param {string} name\n     * @param {Object} [params]\n     */\n    emit: function (name, params) {\n        assert(isString(name), 'EventEmitter#emit: `name` is not a string');\n\n        if (!isArray(this._listeners)) {\n            this._listeners = [];\n        }\n\n        forEach(this._listeners, function (event) {\n            if (event.name === name) {\n                event.fn.call(event.ctx, params);\n            }\n\n            if (event.name === 'all') {\n                event.fn.call(event.ctx, name, params);\n            }\n        });\n    },\n\n    /**\n     * Mixin properties.\n     * Best way to setup EventEmitter on any object.\n     *\n     * @param {Object} target\n     */\n    mixin: function (target) {\n        for (var key in this) {\n            if (this.hasOwnProperty(key)) {\n                target[key] = this[key];\n            }\n        }\n\n        return target;\n    }\n};\n\n\n// Aliases.\n\nEventEmitter.addEventListener = EventEmitter.addListener = EventEmitter.bind = EventEmitter.on;\nEventEmitter.removeEventListener = EventEmitter.removeListener = EventEmitter.unbind = EventEmitter.off;\nEventEmitter.trigger = EventEmitter.emit;\n\n\n// Export `EventEmitter`.\nmodule.exports = EventEmitter;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0 1\n **/"],"sourceRoot":""}